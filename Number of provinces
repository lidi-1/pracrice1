#include <vector>
using namespace std;

// Class to find number of connected components (provinces) in a graph
class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<bool> visited(n, false);
        int provinces = 0;

        // Iterate over each city
        for (int i = 0; i < n; ++i) {
            // If city not visited, start a DFS to mark all connected cities
            if (!visited[i]) {
                dfs(isConnected, visited, i);
                provinces++;  // One province found
            }
        }

        return provinces;
    }

private:
    // DFS helper function to visit all connected cities starting from 'city'
    void dfs(const vector<vector<int>>& isConnected, vector<bool>& visited, int city) {
        visited[city] = true;

        // Visit all cities connected to current city
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[city][j] == 1 && !visited[j]) {
                dfs(isConnected, visited, j);
            }
        }
    }
};
