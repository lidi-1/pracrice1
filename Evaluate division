#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>

using namespace std;

class Solution {
public:
    // DFS helper to find the product of weights along the path from curr to target
    double dfs(const string& curr, const string& target,
               unordered_map<string, vector<pair<string, double>>>& graph,
               unordered_set<string>& visited) {
        
        // If either node is missing in the graph, no valid path
        if (graph.find(curr) == graph.end() || graph.find(target) == graph.end())
            return -1.0;
        
        // If source and target are the same, return 1 (multiplicative identity)
        if (curr == target)
            return 1.0;
        
        visited.insert(curr);

        // Explore neighbors of the current node
        for (const auto& [neighbor, weight] : graph[curr]) {
            if (visited.count(neighbor))
                continue;  // Skip visited nodes to avoid cycles
            
            double res = dfs(neighbor, target, graph, visited);
            if (res != -1.0) {
                return res * weight;  // Multiply the edge weight with the result from recursion
            }
        }

        return -1.0;  // No path found
    }

    vector<double> calcEquation(vector<vector<string>>& equations,
                                vector<double>& values,
                                vector<vector<string>>& queries) {
        
        unordered_map<string, vector<pair<string, double>>> graph;

        // Build the bidirectional graph from equations
        for (int i = 0; i < equations.size(); ++i) {
            const string& a = equations[i][0];
            const string& b = equations[i][1];
            double val = values[i];

            graph[a].emplace_back(b, val);
            graph[b].emplace_back(a, 1.0 / val);
        }

        vector<double> results;

        // Process each query by searching for a path
        for (const auto& query : queries) {
            unordered_set<string> visited;
            double answer = dfs(query[0], query[1], graph, visited);
            results.push_back(answer);
        }

        return results;
    }
};
