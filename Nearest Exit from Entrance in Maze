#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int rows = maze.size();
        int cols = maze[0].size();

        // A queue to help us do Breadth-First Search (BFS)
        queue<pair<int, int>> bfsQueue;
        bfsQueue.push({entrance[0], entrance[1]});

        // Mark the entrance as visited so we don't revisit it
        maze[entrance[0]][entrance[1]] = '+';

        // Used to count how many steps we've taken
        int stepsTaken = 0;

        // Directions to move: right, down, left, up
        vector<int> directions = {0, 1, 0, -1, 0};

        // Start the BFS loop
        while (!bfsQueue.empty()) {
            int currentLevelSize = bfsQueue.size();
            stepsTaken++;  // We are going one level deeper in the BFS

            for (int i = 0; i < currentLevelSize; ++i) {
                auto [currentRow, currentCol] = bfsQueue.front();
                bfsQueue.pop();

                // Explore the four directions from current position
                for (int d = 0; d < 4; ++d) {
                    int nextRow = currentRow + directions[d];
                    int nextCol = currentCol + directions[d + 1];

                    // Check if the move is inside the maze and the cell is empty
                    if (nextRow >= 0 && nextRow < rows && nextCol >= 0 && nextCol < cols &&
                        maze[nextRow][nextCol] == '.') {

                        // If this cell is on the boundary and is not the entrance, it's an exit
                        if (nextRow == 0 || nextRow == rows - 1 || nextCol == 0 || nextCol == cols - 1) {
                            return stepsTaken;
                        }

                        // Mark this cell as visited and add to queue for next steps
                        maze[nextRow][nextCol] = '+';
                        bfsQueue.push({nextRow, nextCol});
                    }
                }
            }
        }

        // If no exit was found, return -1
        return -1;
    }
};
