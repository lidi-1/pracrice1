#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    // This function returns the minimum number of dice rolls needed to reach the last cell
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size(); // size of the board (n x n)
        int totalCells = n * n;

        // Step 1: Convert 2D board into 1D array using boustrophedon style
        // This helps us treat the game as a simple 1D path with jumps
        vector<int> boardInOneDimension(totalCells + 1, -1); // use 1-based indexing

        int cellNumber = 1; // we'll start from cell 1
        bool moveLeftToRight = true;

        for (int row = n - 1; row >= 0; row--) {
            if (moveLeftToRight) {
                for (int col = 0; col < n; col++) {
                    boardInOneDimension[cellNumber] = board[row][col];
                    cellNumber++;
                }
            } else {
                for (int col = n - 1; col >= 0; col--) {
                    boardInOneDimension[cellNumber] = board[row][col];
                    cellNumber++;
                }
            }
            moveLeftToRight = !moveLeftToRight; // flip direction after each row
        }

        // Step 2: Use BFS to find the shortest path to the last cell
        queue<int> cellsToVisit;
        vector<bool> alreadyVisited(totalCells + 1, false);

        // Start from cell 1
        cellsToVisit.push(1);
        alreadyVisited[1] = true;

        int movesTaken = 0;

        while (!cellsToVisit.empty()) {
            int levelSize = cellsToVisit.size(); // how many positions to process at this BFS level

            for (int i = 0; i < levelSize; i++) {
                int currentCell = cellsToVisit.front();
                cellsToVisit.pop();

                // If we reach the last cell, return the number of moves taken
                if (currentCell == totalCells) {
                    return movesTaken;
                }

                // Try all dice outcomes: move 1 to 6 steps forward
                for (int dice = 1; dice <= 6; dice++) {
                    int nextCell = currentCell + dice;

                    // Ignore moves that go off the board
                    if (nextCell > totalCells) {
                        continue;
                    }

                    // If there's a snake or ladder, take it
                    if (boardInOneDimension[nextCell] != -1) {
                        nextCell = boardInOneDimension[nextCell];
                    }

                    // Only add to queue if this cell hasn't been visited yet
                    if (!alreadyVisited[nextCell]) {
                        alreadyVisited[nextCell] = true;
                        cellsToVisit.push(nextCell);
                    }
                }
            }

            // After trying all options from current level, increment the move counter
            movesTaken++;
        }

        // If we finish the BFS loop without reaching the end, return -1 (not reachable)
        return -1;
    }
};
