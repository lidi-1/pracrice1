#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int maxArea = 0;
        int m = grid.size();
        int n = grid[0].size();

        // Iterate through every cell in the grid
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                // If it's land, perform DFS to find the area of the island
                if (grid[i][j] == 1) {
                    int area = dfs(grid, i, j);
                    maxArea = max(maxArea, area);  // Update max area
                }
            }
        }
        return maxArea;
    }

private:
    // DFS helper function to compute the area of the island
    int dfs(vector<vector<int>>& grid, int i, int j) {
        // Check for out-of-bounds or water cell
        if (i < 0 || j < 0 || i >= (int)grid.size() || j >= (int)grid[0].size() || grid[i][j] == 0) {
            return 0;
        }

        // Mark current cell as visited by setting it to 0 (water)
        grid[i][j] = 0;

        // Count current cell and recursively explore neighbors
        int area = 1;
        area += dfs(grid, i + 1, j);
        area += dfs(grid, i - 1, j);
        area += dfs(grid, i, j + 1);
        area += dfs(grid, i, j - 1);

        return area;
    }
};
