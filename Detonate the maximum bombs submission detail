#include <vector>
#include <functional>
using namespace std;

class Solution {
public:
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<vector<int>> graph(n);

        // Build the graph where each node points to bombs it can detonate
        for (int i = 0; i < n; ++i) {
            long long x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;  // Skip self

                long long x2 = bombs[j][0], y2 = bombs[j][1];
                long long dx = x1 - x2, dy = y1 - y2;

                // Check if bomb j lies within the radius of bomb i
                if (dx * dx + dy * dy <= r1 * r1) {
                    graph[i].push_back(j);
                }
            }
        }

        // DFS to count how many bombs get detonated starting from 'start'
        auto dfs = [&](int start) {
            vector<bool> visited(n, false);
            int count = 0;

            function<void(int)> detonate = [&](int u) {
                visited[u] = true;
                ++count;
                for (int neighbor : graph[u]) {
                    if (!visited[neighbor]) {
                        detonate(neighbor);
                    }
                }
            };

            detonate(start);
            return count;
        };

        // Try detonating each bomb and keep track of the maximum number detonated
        int maxDetonated = 0;
        for (int i = 0; i < n; ++i) {
            maxDetonated = max(maxDetonated, dfs(i));
        }

        return maxDetonated;
    }
};
